// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// This shader accumulates the lighting for every cluster fraction

#pragma anki 16bit

#pragma anki mutator ENABLE_SHADOWS 0 1
#pragma anki mutator CLIPMAP_DIFFUSE_INDIRECT 0 1

#pragma anki technique comp

#include <AnKi/Shaders/Include/MiscRendererTypes.h>
#include <AnKi/Shaders/ClusteredShadingFunctions.hlsl>
#include <AnKi/Shaders/IndirectDiffuseClipmaps.hlsl>
#include <AnKi/Shaders/ImportanceSampling.hlsl>

constexpr F32 kPhaseFunctionAnisotropy = 0.3;

SamplerState g_linearAnyRepeatSampler : register(s0);
SamplerState g_linearAnyClampSampler : register(s1);
SamplerComparisonState g_linearAnyClampShadowSampler : register(s2);

RWTexture3D<Vec4> g_volume : register(u0);
Texture2D<Vec4> g_noiseTex : register(t0);
Texture3D<Vec4> g_prevVolume : register(t1);

StructuredBuffer<PointLight> g_pointLights : register(t2);
StructuredBuffer<SpotLight> g_spotLights : register(t3);
Texture2D<Vec4> g_shadowAtlasTex : register(t4);
StructuredBuffer<FogDensityVolume> g_fogDensityVolumes : register(t5);
StructuredBuffer<Cluster> g_clusters : register(t6);
#if !CLIPMAP_DIFFUSE_INDIRECT
StructuredBuffer<GlobalIlluminationProbe> g_giProbes : register(t7);
#endif

ConstantBuffer<GlobalRendererConstants> g_globalConstants : register(b0);

ANKI_FAST_CONSTANTS(VolumetricLightingConstants, g_consts)

Vec3 worldPosInsideClusterAndZViewSpace(Vec3 relativePos, Vec3 clusterIdf, out F32 negativeZViewSpace, out Vec3 uvw)
{
	// XY UV
	uvw.xy = lerp(clusterIdf.xy, clusterIdf.xy + 1.0, relativePos.xy) / Vec2(g_consts.m_volumeSize.xy);

	// Compute the linear depth
	const F32 maxLinearDepth = g_consts.m_maxZSplitsToProcessf / F32(g_globalConstants.m_zSplitCount);
	const F32 linearDepthFraction = maxLinearDepth / F32(g_consts.m_volumeSize.z);
	const F32 linearDepthNear = clusterIdf.z * linearDepthFraction;
	const F32 linearDepthFar = (clusterIdf.z + 1.0) * linearDepthFraction;
	const F32 linearDepth = lerp(linearDepthNear, linearDepthFar, relativePos.z);
	uvw.z = linearDepth;

	// View space
	negativeZViewSpace =
		linearDepth * (g_globalConstants.m_matrices.m_far - g_globalConstants.m_matrices.m_near) + g_globalConstants.m_matrices.m_near;
	const F32 zViewSpace = -negativeZViewSpace;
	const Vec2 xyViewSpace = uvToNdc(uvw.xy) * g_globalConstants.m_matrices.m_unprojectionParameters.xy * zViewSpace;

	// Get the final world pos
	const Vec3 worldPos = mul(g_globalConstants.m_matrices.m_cameraTransform, Vec4(xyViewSpace, zViewSpace, 1.0));

	return worldPos;
}

Vec3 worldPosInsideCluster(Vec3 relativePos, Vec3 clusterIdf)
{
	F32 unused;
	Vec3 unused1;
	return worldPosInsideClusterAndZViewSpace(relativePos, clusterIdf, unused, unused1);
}

// https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html
F32 phaseFunction(Vec3 viewDir, Vec3 lightDir, F32 g)
{
	const F32 g2 = g * g;
	const F32 cosTheta = max(0.0, dot(viewDir, lightDir));
	const F32 cosTheta2 = cosTheta * cosTheta;

	const F32 a = (3.0 * (1.0 - g2)) / (2.0 * (2.0 + g2));
	const F32 b = (1.0 + cosTheta2) / pow(1.0 + g2 - 2.0 * g * cosTheta, 3.0 / 2.0);

	return saturate(a * b);
}

Vec4 accumulateLightsAndFog(Cluster cluster, Vec3 worldPos, F32 negativeZViewSpace, F32 noise)
{
	ANKI_MAYBE_UNUSED(negativeZViewSpace);

	Vec3 color = 0.0;
	const Vec3 viewDir = normalize(g_globalConstants.m_cameraPosition - worldPos);

	// Dir light
	const DirectionalLight dirLight = g_globalConstants.m_directionalLight;
	if(dirLight.m_active)
	{
		F32 factor = phaseFunction(viewDir, dirLight.m_direction, kPhaseFunctionAnisotropy);

#if ENABLE_SHADOWS
		const U32 shadowCascadeCount = dirLight.m_shadowCascadeCount;

		if(shadowCascadeCount > 0u && negativeZViewSpace < dirLight.m_shadowCascadeDistances[shadowCascadeCount - 1u])
		{
			const U32 cascadeIdx = computeShadowCascadeIndex(negativeZViewSpace, dirLight.m_shadowCascadeDistances, shadowCascadeCount);

			factor *= computeShadowFactorDirLight<F32>(dirLight, cascadeIdx, worldPos, g_shadowAtlasTex, g_linearAnyClampShadowSampler);
		}
#endif

		color += dirLight.m_diffuseColor * factor;
	}

	// Point lights
	U32 idx = 0;
	[loop] while((idx = iteratePointLights(cluster)) != kMaxU32)
	{
		const PointLight light = g_pointLights[idx];

		const Vec3 frag2Light = light.m_position - worldPos;
		F32 factor = computeAttenuationFactor<F32>(light.m_radius, frag2Light);

		factor *= phaseFunction(viewDir, normalize(worldPos - light.m_position), kPhaseFunctionAnisotropy);

#if ENABLE_SHADOWS
		if(light.m_shadow)
		{
			factor *= computeShadowFactorPointLight<F32>(light, frag2Light, g_shadowAtlasTex, g_linearAnyClampShadowSampler);
		}
#endif

		color += light.m_diffuseColor * factor;
	}

	// Spot lights
	[loop] while((idx = iterateSpotLights(cluster)) != kMaxU32)
	{
		const SpotLight light = g_spotLights[idx];

		const Vec3 frag2Light = light.m_position - worldPos;
		F32 factor = computeAttenuationFactor<F32>(light.m_radius, frag2Light);

		const Vec3 l = normalize(frag2Light);

		factor *= computeSpotFactor<F32>(l, light.m_outerCos, light.m_innerCos, light.m_direction);

		factor *= phaseFunction(viewDir, light.m_direction, kPhaseFunctionAnisotropy);

#if ENABLE_SHADOWS
		if(light.m_shadow)
		{
			factor *= computeShadowFactorSpotLight<F32>(light, worldPos, g_shadowAtlasTex, g_linearAnyClampShadowSampler);
		}
#endif

		color += light.m_diffuseColor * factor;
	}

	// Indirect diffuse GI
#if CLIPMAP_DIFFUSE_INDIRECT
	{
		const SampleClipmapFlag flags = kSampleClipmapFlagNone;
		const Vec3 irradiance = sampleClipmapAvgIrradiance(worldPos, 0.0, g_globalConstants.m_cameraPosition,
														   g_globalConstants.m_indirectDiffuseClipmaps, g_linearAnyRepeatSampler, flags, noise);

		color += irradiance * kPi; // Not sure why the multiplication with Pi but it looks more correct
	}
#else
	{
		Vec3 diffIndirect = sampleGiProbes<F32>(cluster, g_giProbes, viewDir, worldPos, g_linearAnyClampSampler);
		diffIndirect *= kPi; // Irradiance is pre-divided with PI so fix it

		color += diffIndirect;
	}
#endif

	// Fog density
	F32 fogDensity = 0.0;
	{
		// Calculate the constant density
		const F32 fogFactor = saturate((worldPos.y - g_consts.m_minHeight) * g_consts.m_oneOverMaxMinusMinHeight);
		fogDensity = lerp(g_consts.m_densityAtMinHeight, g_consts.m_densityAtMaxHeight, fogFactor);

		[loop] while(cluster.m_fogDensityVolumesMask != 0u)
		{
			const U32 idx = U32(firstbitlow2(cluster.m_fogDensityVolumesMask));
			cluster.m_fogDensityVolumesMask &= ~(1u << idx);
			const FogDensityVolume vol = g_fogDensityVolumes[idx];

			F32 factor;
			[branch] if(vol.m_isBox == 1u)
			{
				factor = computeProbeBlendWeight(worldPos, vol.m_aabbMinOrSphereCenter, vol.m_aabbMaxOrSphereRadius, 0.2);
			}
			else
			{
				const Vec3 diff = worldPos - vol.m_aabbMinOrSphereCenter;
				F32 distSq = dot(diff, diff) / (vol.m_aabbMaxOrSphereRadius.x * vol.m_aabbMaxOrSphereRadius.x);
				distSq = min(1.0, distSq);
				factor = 1.0 - distSq;
			}

			fogDensity += vol.m_density * factor;
		}
	}

	return Vec4(color, fogDensity);
}

[numthreads(8, 8, 8)] void main(UVec3 svDispatchThreadId : SV_DISPATCHTHREADID)
{
	const UVec3 clusterId = svDispatchThreadId;
	if(any(clusterId >= g_consts.m_volumeSize))
	{
		return;
	}

	// Find a random pos inside the cluster
	Vec3 random = TEX(g_noiseTex, (clusterId.xy + clusterId.z) % 64).rgb;
	random = animateBlueNoise(random, g_globalConstants.m_frame);

	F32 negativeZViewSpace;
	Vec3 uvw;
	const Vec3 worldPos = worldPosInsideClusterAndZViewSpace(random, clusterId, negativeZViewSpace, uvw);

	// Get the cluster
	const UVec2 tileIdxXY = UVec2(uvw.xy * Vec2(g_globalConstants.m_tileCounts));
	const U32 tileIdx = tileIdxXY.y * g_globalConstants.m_tileCounts.x + tileIdxXY.x;
	Cluster cluster = g_clusters[tileIdx];

	const U32 zSplitIdx = U32(uvw.z * F32(g_globalConstants.m_zSplitCount));
	const Cluster split = g_clusters[g_globalConstants.m_tileCounts.x * g_globalConstants.m_tileCounts.y + zSplitIdx];

	cluster = mergeClusters(cluster, split);

	// Get lighting
	Vec4 lightAndFog = accumulateLightsAndFog(cluster, worldPos, negativeZViewSpace, random.x);

	// Read the prev result
	{
		// Better get a new world pos in the center of the cluster. Using worldPos creates noisy results
		const Vec3 midWPos = worldPosInsideCluster(Vec3(0.5, 0.5, 0.5), clusterId);

		// Project
		const Vec4 prevClipPos4 = mul(g_globalConstants.m_previousMatrices.m_viewProjection, Vec4(midWPos, 1.0));
		const Vec3 prevClipPos = prevClipPos4.xyz / prevClipPos4.w;

		// Read prev
		if(all(prevClipPos.xy > -1.0) && all(prevClipPos.xy < 1.0))
		{
			const F32 linearDepth = linearizeDepth(prevClipPos.z, g_globalConstants.m_matrices.m_near, g_globalConstants.m_matrices.m_far);
			const Vec3 uvw = Vec3(ndcToUv(prevClipPos.xy), linearDepth * (F32(g_globalConstants.m_zSplitCount) / g_consts.m_maxZSplitsToProcessf));
			const Vec4 history = g_prevVolume.SampleLevel(g_linearAnyClampSampler, uvw, 0.0);
			lightAndFog = lerp(history, lightAndFog, 1.0 / 16.0);
		}
	}

	// Write result
	TEX(g_volume, clusterId) = lightAndFog;
}
