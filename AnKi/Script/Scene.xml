<glue>
	<head><![CDATA[// Copyright (C) 2009-present, Panagiotis Christopoulos Charitos and contributors.
// All rights reserved.
// Code licensed under the BSD License.
// http://www.anki3d.org/LICENSE

// WARNING: This file is auto generated.

#include <AnKi/Script/LuaBinder.h>
#include <AnKi/Script/ScriptManager.h>
#include <AnKi/Scene.h>

namespace anki {

template<typename T, typename... TArgs>
static T* newSceneNode(SceneGraph* scene, CString name, TArgs... args)
{
	return scene->template newSceneNode<T>(name, std::forward<TArgs>(args)...);
}

template<typename T, typename... TArgs>
static T* newEvent(EventManager* eventManager, TArgs... args)
{
	return eventManager->template newEvent<T>(std::forward<TArgs>(args)...);
}

static SceneGraph* getSceneGraph(lua_State* l)
{
	LuaBinder* binder = nullptr;
	lua_getallocf(l, reinterpret_cast<void**>(&binder));

	SceneGraph* scene = &SceneGraph::getSingleton();
	ANKI_ASSERT(scene);
	return scene;
}

static EventManager* getEventManager(lua_State* l)
{
	return &getSceneGraph(l)->getEventManager();
}

using WeakArraySceneNodePtr = WeakArray<SceneNode*>;
]]></head>

	<enums>
		<enum name="LightComponentType">
			<enumerant name="kPoint"/>
			<enumerant name="kSpot"/>
			<enumerant name="kDirectional"/>
		</enum>
	</enums>

	<enums>
		<enum name="BodyComponentCollisionShapeType">
			<enumerant name="kFromMeshComponent"/>
			<enumerant name="kAabb"/>
			<enumerant name="kSphere"/>
			<enumerant name="kCount"/>
		</enum>
	</enums>

	<classes>
		<!-- Other -->
		<class name="WeakArraySceneNodePtr">
			<methods>
				<method name="getSize">
					<return>U32</return>
				</method>
				<method name="getAt">
					<overrideCall><![CDATA[SceneNode* ret = (*self)[arg0];]]></overrideCall>
					<args><arg>U32</arg></args>
					<return>SceneNode*</return>
				</method>
			</methods>
		</class>

		<!-- Components -->
		<class name="LightComponent">
			<methods>
				<method name="setLightComponentType">
					<args>
						<arg>LightComponentType</arg>
					</args>
				</method>
				<method name="setDiffuseColor">
					<args>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
				<method name="getDiffuseColor">
					<return>const Vec4&amp;</return>
				</method>
				<method name="setRadius">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getRadius">
					<return>F32</return>
				</method>
				<method name="setDistance">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getDistance">
					<return>F32</return>
				</method>
				<method name="setInnerAngle">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getInnerAngle">
					<return>F32</return>
				</method>
				<method name="setOuterAngle">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getOuterAngle">
					<return>F32</return>
				</method>
				<method name="setShadowEnabled">
					<args>
						<arg>Bool</arg>
					</args>
				</method>
				<method name="getShadowEnabled">
					<return>Bool</return>
				</method>
			</methods>
		</class>

		<class name="DecalComponent">
			<methods>
				<method name="loadDiffuseImageResource">
					<args>
						<arg>CString</arg>
						<arg>F32</arg>
					</args>
				</method>
				<method name="loadMetalRoughnessImageResource">
					<args>
						<arg>CString</arg>
						<arg>F32</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="LensFlareComponent">
			<methods>
				<method name="loadImageResource">
					<args>
						<arg>CString</arg>
					</args>
				</method>
				<method name="setFirstFlareSize">
					<args>
						<arg>const Vec2&amp;</arg>
					</args>
				</method>
				<method name="setColorMultiplier">
					<args>
						<arg>const Vec4&amp;</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="BodyComponent">
			<methods>
				<method name="setCollisionShapeType">
					<args>
						<arg>BodyComponentCollisionShapeType</arg>
					</args>
				</method>
				<method name="setBoxExtend">
					<args>
						<arg>Vec3</arg>
					</args>
				</method>
				<method name="getBoxExtend">
					<return>const Vec3&amp;</return>
				</method>
				<method name="setSphereRadius">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getSphereRadius">
					<return>F32</return>
				</method>
				<method name="teleportTo">
					<args>
						<arg>Vec3</arg>
						<arg>const Mat3&amp;</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="TriggerComponent">
			<methods>
				<method name="getSceneNodesEnter">
					<return>WeakArraySceneNodePtr</return>
				</method>
				<method name="getSceneNodesExit">
					<return>WeakArraySceneNodePtr</return>
				</method>
			</methods>
		</class>

		<class name="FogDensityComponent">
			<methods>
				<method name="setDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getDensity">
					<return>F32</return>
				</method>
			</methods>
		</class>

		<class name="CameraComponent">
			<methods>
				<method name="setPerspective">
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>F32</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="GlobalIlluminationProbeComponent">
			<methods>
				<method name="setCellSize">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getCellSize">
					<return>F32</return>
				</method>
				<method name="setFadeDistance">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="getFadeDistance">
					<return>F32</return>
				</method>
			</methods>
		</class>

		<class name="ReflectionProbeComponent">
			<methods></methods>
		</class>

		<class name="ParticleEmitterComponent">
			<methods>
				<method name="loadParticleEmitterResource">
					<args>
						<arg>CString</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="MeshComponent">
			<methods>
				<method name="setMeshFilename">
					<args>
						<arg>CString</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="MaterialComponent">
			<methods>
				<method name="setMaterialFilename">
					<args>
						<arg>CString</arg>
					</args>
				</method>
				<method name="setSubmeshIndex">
					<args>
						<arg>U32</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="SkinComponent">
			<methods>
				<method name="loadSkeletonResource">
					<args>
						<arg>CString</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="SkyboxComponent">
			<methods>
				<method name="setSolidColor">
					<args>
						<arg>Vec3</arg>
					</args>
				</method>
				<method name="loadImageResource">
					<args>
						<arg>CString</arg>
					</args>
				</method>
				<method name="setGeneratedSky" />
				<method name="setMinFogDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setMaxFogDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setHeightOfMinFogDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setHeightOfMaxFogDensity">
					<args>
						<arg>F32</arg>
					</args>
				</method>
				<method name="setFogDiffuseColor">
					<args>
						<arg>Vec3</arg>
					</args>
				</method>
				<method name="setImageBias">
					<args>
						<arg>Vec3</arg>
					</args>
				</method>
				<method name="setImageScale">
					<args>
						<arg>Vec3</arg>
					</args>
				</method>
			</methods>
		</class>

		<!-- Nodes -->
		<class name="SceneNode">
			<methods>
				<method name="getName">
					<return>CString</return>
				</method>
				<method name="addChild">
					<args>
						<arg>SceneNode*</arg>
					</args>
				</method>
				<method name="markForDeletion"></method>

				<method name="setLocalOrigin">
					<args>
						<arg>const Vec3&amp;</arg>
					</args>
				</method>
				<method name="getLocalOrigin">
					<return>Vec3</return>
				</method>
				<method name="setLocalRotation">
					<args>
						<arg>const Mat3&amp;</arg>
					</args>
				</method>
				<method name="getLocalRotation">
					<return>Mat3</return>
				</method>
				<method name="setLocalScale">
					<args>
						<arg>const Vec3&amp;</arg>
					</args>
				</method>
				<method name="getLocalScale">
					<return>Vec3</return>
				</method>
				<method name="setLocalTransform">
					<args>
						<arg>const Transform&amp;</arg>
					</args>
				</method>
				<method name="getLocalTransform">
					<return>const Transform&amp;</return>
				</method>

				<method name="newComponent&lt;LightComponent&gt;" alias="newLightComponent">
					<return>LightComponent*</return>
				</method>
				<method name="newComponent&lt;LensFlareComponent&gt;" alias="newLensFlareComponent">
					<return>LensFlareComponent*</return>
				</method>
				<method name="newComponent&lt;DecalComponent&gt;" alias="newDecalComponent">
					<return>DecalComponent*</return>
				</method>
				<method name="newComponent&lt;TriggerComponent&gt;" alias="newTriggerComponent">
					<return>TriggerComponent*</return>
				</method>
				<method name="newComponent&lt;FogDensityComponent&gt;" alias="newFogDensityComponent">
					<return>FogDensityComponent*</return>
				</method>
				<method name="newComponent&lt;CameraComponent&gt;" alias="newCameraComponent">
					<return>CameraComponent*</return>
				</method>
				<method name="newComponent&lt;GlobalIlluminationProbeComponent&gt;" alias="newGlobalIlluminationProbeComponent">
					<return>GlobalIlluminationProbeComponent*</return>
				</method>
				<method name="newComponent&lt;ReflectionProbeComponent&gt;" alias="newReflectionProbeComponent">
					<return>ReflectionProbeComponent*</return>
				</method>
				<method name="newComponent&lt;BodyComponent&gt;" alias="newBodyComponent">
					<return>BodyComponent*</return>
				</method>
				<method name="newComponent&lt;ParticleEmitterComponent&gt;" alias="newParticleEmitterComponent">
					<return>ParticleEmitterComponent*</return>
				</method>
				<method name="newComponent&lt;MeshComponent&gt;" alias="newMeshComponent">
					<return>MeshComponent*</return>
				</method>
				<method name="newComponent&lt;MaterialComponent&gt;" alias="newMaterialComponent">
					<return>MaterialComponent*</return>
				</method>
				<method name="newComponent&lt;SkinComponent&gt;" alias="newSkinComponent">
					<return>SkinComponent*</return>
				</method>
				<method name="newComponent&lt;SkyboxComponent&gt;" alias="newSkyboxComponent">
					<return>SkyboxComponent*</return>
				</method>

				<method name="getFirstComponentOfType&lt;LightComponent&gt;" alias="getFirstLightComponent">
					<return>LightComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;LensFlareComponent&gt;" alias="getFirstLensFlareComponent">
					<return>LensFlareComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;DecalComponent&gt;" alias="getFirstDecalComponent">
					<return>DecalComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;TriggerComponent&gt;" alias="getFirstTriggerComponent">
					<return>TriggerComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;FogDensityComponent&gt;" alias="getFirstFogDensityComponent">
					<return>FogDensityComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;CameraComponent&gt;" alias="getFirstCameraComponent">
					<return>CameraComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;GlobalIlluminationProbeComponent&gt;" alias="getFirstGlobalIlluminationProbeComponent">
					<return>GlobalIlluminationProbeComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;ReflectionProbeComponent&gt;" alias="getFirstReflectionProbeComponent">
					<return>ReflectionProbeComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;BodyComponent&gt;" alias="getFirstBodyComponent">
					<return>BodyComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;ParticleEmitterComponent&gt;" alias="getFirstParticleEmitterComponent">
					<return>ParticleEmitterComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;MeshComponent&gt;" alias="getFirstMeshComponent">
					<return>MeshComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;MaterialComponent&gt;" alias="getFirstMaterialComponent">
					<return>MaterialComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;SkinComponent&gt;" alias="getFirstSkinComponent">
					<return>SkinComponent&amp;</return>
				</method>
				<method name="getFirstComponentOfType&lt;SkyboxComponent&gt;" alias="getFirstSkyboxComponent">
					<return>SkyboxComponent&amp;</return>
				</method>
			</methods>
		</class>
		<class name="SceneGraph">
			<methods>
				<method name="newSceneNode">
					<overrideCall><![CDATA[SceneNode* ret = newSceneNode<SceneNode>(self, arg0);]]></overrideCall>
					<args>
						<arg>CString</arg>
					</args>
					<return>SceneNode*</return>
				</method>
				<method name="setActiveCameraNode">
					<args>
						<arg>SceneNode*</arg>
					</args>
				</method>
				<method name="tryFindSceneNode">
					<args>
						<arg>CString</arg>
					</args>
					<return>SceneNode*</return>
				</method>
			</methods>
		</class>

		<!-- Events -->
		<class name="Event">
			<methods>
				<method name="getAssociatedSceneNodes">
					<return>WeakArraySceneNodePtr</return>
				</method>
			</methods>
		</class>

		<class name="LightEvent">
			<methods>
				<method name="setIntensityMultiplier">
					<args><arg>const Vec4&amp;</arg></args>
				</method>
				<method name="setFrequency">
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="ScriptEvent"/>

		<class name="JitterMoveEvent">
			<methods>
				<method name="setPositionLimits">
					<args>
						<arg>Vec3</arg>
						<arg>Vec3</arg>
					</args>
				</method>
			</methods>
		</class>

		<class name="AnimationEvent"/>

		<class name="EventManager">
			<methods>
				<method name="newLightEvent">
					<overrideCall><![CDATA[LightEvent* ret = newEvent<LightEvent>(self, arg0, arg1, arg2);]]></overrideCall>
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>SceneNode*</arg>
					</args>
					<return>LightEvent*</return>
				</method>

				<method name="newScriptEvent">
					<overrideCall><![CDATA[ScriptEvent* ret = newEvent<ScriptEvent>(self, arg0, arg1, arg2);]]></overrideCall>
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>CString</arg>
					</args>
					<return>ScriptEvent*</return>
				</method>

				<method name="newJitterMoveEvent">
					<overrideCall><![CDATA[JitterMoveEvent* ret = newEvent<JitterMoveEvent>(self, arg0, arg1, arg2);]]></overrideCall>
					<args>
						<arg>F32</arg>
						<arg>F32</arg>
						<arg>SceneNode*</arg>
					</args>
					<return>JitterMoveEvent*</return>
				</method>

				<method name="newAnimationEvent">
					<overrideCall><![CDATA[AnimationEvent* ret = newEvent<AnimationEvent>(self, arg0, arg1, arg2);]]></overrideCall>
					<args>
						<arg>CString</arg>
						<arg>CString</arg>
						<arg>SceneNode*</arg>
					</args>
					<return>AnimationEvent*</return>
				</method>
			</methods>
		</class>
	</classes>
	<functions>
		<function name="getSceneGraph">
			<overrideCall>SceneGraph* ret = getSceneGraph(l);</overrideCall>
			<return>SceneGraph*</return>
		</function>
	</functions>
	<functions>
		<function name="getEventManager">
			<overrideCall>EventManager* ret = getEventManager(l);</overrideCall>
			<return>EventManager*</return>
		</function>
	</functions>
	<tail><![CDATA[} // end namespace anki]]></tail>
</glue>

